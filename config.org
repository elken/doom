#+TITLE: Config
#+LATEX_CLASS: chameleon
#+CAPTION: Banner
[[file:images/banner.png]]

(icon courtesy of https://github.com/eccentric-j/doom-icon)

Below is my [[https://github.com/hlissner/doom-emacs][doom-emacs]] config. Most of it isn't particularly original; snippets from stackoverflow, modernemacs and a large amount of the fancy macros from [[https://github.com/daviwil][David Wilson]]. Everything else will be commented to the best of /my/ ability.

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[Setup][Setup]]
  - [[Workflow][Workflow]]
  - [[EXWM Setup][EXWM Setup]]
    - [[modules/ui/exwm][modules/ui/exwm]]
    - [[Session][Session]]
    - [[start.sh / start-debug.sh][start.sh / start-debug.sh]]
- [[FAQ][FAQ]]
- [[Globals][Globals]]
  - [[Constants and Variables][Constants and Variables]]
    - [[Subword-mode][Subword-mode]]
    - [[Load env after reload][Load env after reload]]
  - [[Settings][Settings]]
    - [[Evil][Evil]]
    - [[Lispyville][Lispyville]]
    - [[Better defaults][Better defaults]]
    - [[Auth info][Auth info]]
    - [[Modeline][Modeline]]
    - [[Magit][Magit]]
    - [[EShell][EShell]]
      - [[Prompt][Prompt]]
      - [[Settings][Settings]]
    - [[User setup][User setup]]
    - [[Server][Server]]
    - [[vterm][vterm]]
      - [[Kill buffer][Kill buffer]]
      - [[Fix =c-backspace=][Fix c-backspace]]
      - [[Functions][Functions]]
- [[Keybindings][Keybindings]]
  - [[Defaults][Defaults]]
  - [[Search][Search]]
  - [[Dired][Dired]]
- [[Graphical setup][Graphical setup]]
  - [[Modeline][Modeline]]
  - [[Fonts][Fonts]]
  - [[Theme][Theme]]
  - [[Line Numbers][Line Numbers]]
  - [[GUI/Frame][GUI/Frame]]
- [[Org Mode][Org Mode]]
  - [[Font setup][Font setup]]
  - [[Characters][Characters]]
  - [[Keywords][Keywords]]
  - [[Agenda/Log][Agenda/Log]]
  - [[Cycle][Cycle]]
  - [[Folding][Folding]]
  - [[Org-appear][Org-appear]]
  - [[Indent & variable pitch][Indent & variable pitch]]
  - [[Archive/Cleanup][Archive/Cleanup]]
  - [[Show images][Show images]]
  - [[Autoexecute tangled shell files][Autoexecute tangled shell files]]
  - [[Weblog setup][Weblog setup]]
  - [[Visual column mode][Visual column mode]]
  - [[org-make-toc][org-make-toc]]
  - [[Better snippets][Better snippets]]
  - [[Roam][Roam]]
  - [[Capture][Capture]]
    - [[Prettify][Prettify]]
    - [[Templates][Templates]]
  - [[Export][Export]]
    - [[LaTeX][LaTeX]]
      - [[Conditional features][Conditional features]]
      - [[Tectonic][Tectonic]]
      - [[Classes][Classes]]
      - [[Packages][Packages]]
      - [[Pretty code blocks][Pretty code blocks]]
      - [[Chameleon][Chameleon]]
- [[Email][Email]]
  - [[Sending email][Sending email]]
  - [[Notifications][Notifications]]
- [[Languages][Languages]]
  - [[LSP][LSP]]
  - [[Rust][Rust]]
  - [[PHP][PHP]]
    - [[Intelephense][Intelephense]]
    - [[Eglot][Eglot]]
- [[Packages][Packages]]
  - [[prescient][prescient]]
:END:


* Setup
** Workflow
[[file:images/overview.png]]

** EXWM Setup
One of the many usecases for this config is =exwm= which is pulled from a number of files in the current environment. Loading =exwm= is a simple case of enabling the exwm module, although it's /wildly/ untested and is basically hardcoded to just work for me. Any input is welcome, although unlikely to make it into /this/ module (until I stop being lazy and attempt to make it better for upstream....)

*** modules/ui/exwm
The primary lisp file where the bulk of the configuration is held, with everything from my process manager to a now-playing segment. Below are some usage screenshots.
Standard doom module layout, nothing fishy going on. For those unfamiliar,

 - =init.el= is loaded before anything else really, which is important to properly check if the flag exists to load the exwm code as early as possible
 - =config.el= is the main bread and butter, all the config lives here (surprisingly)
 - =doctor.el= is currently just used for detecting missing exe's, by plugging into =doom doctor=
 - =packages.el= is a list of extra packages to be installed by doom's package manager

[[file:images/kill-process.png]]

[[file:images/tray.png]]

Transparency is handled both through [[*GUI/Frame][Doom]] and via [[file:exwm/picom.conf][picom]].

*** Session
For the sake of simplicity, I use a slightly modified version of [[https://github.com/WJCFerguson/exwm-gnome-flashback][GNOME Flashback]] to run the startup scripts. It also gives me ootb access to things like =pinentry=, the various password stores, =gnome-screensaver= lock screen and the useful screenshot tool.

As such, everything is themed around [[https://nordtheme.com][Nord]].

Over time and due to various issues, I have been migrating to a plain =exwm= session but I haven't yet settled on the best approach.

*** start.sh / start-debug.sh
The scripts responsible for starting up exwm in the right way, including env variables and picom.
* FAQ
None yet because luckily nobody else has seen this spaghetti junction
* Globals
** Constants and Variables
I could make a Bioshock Infinite joke here but I can't think of one. Wouldn't think of one? Would have thought of one.

*** Subword-mode
Subword mode is a good start because PHP uses a lot of CamelCase and it makes refactoring slightly easier

#+begin_src elisp
(global-subword-mode 1)
#+end_src

*** Load env after reload
Most of the time, reloading breaks. So, let's not break.

#+begin_src emacs-lisp
(add-hook! 'doom-after-reload-hook (doom-load-envvars-file (expand-file-name "env" doom-local-dir) t))
#+end_src

** Settings
*** Evil
I make a lot of splits, and it finally got annoying having to swap to them all the time. So, let's change that

#+begin_src emacs-lisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+end_src

*** Lispyville
This structured-editing thing is apparently really neat, so let's see how we go

#+begin_src emacs-lisp
(after! lispy
  (setq lispyville-key-theme
        '((operators normal)
          c-w
          (prettify insert)
          (atom-movement normal visual)
          (additional-movement normal)
          slurp/barf-lispy
          additional)))
#+end_src

*** Better defaults
Make the scratch buffer start in lisp mode

#+begin_src emacs-lisp
(setq doom-scratch-initial-major-mode 'lisp-interaction-mode)
#+end_src

Adjust the which-key delay because I always worry I broke something

#+begin_src emacs-lisp
(use-package! which-key
  :init
  (setq which-key-idle-delay 0.3))
#+end_src

*** Auth info
Add plaintext authinfo file to the list of sources. I /know/ I should use a GPG file but I'll get around to it damn it.

#+begin_src emacs-lisp
(add-to-list 'auth-sources "~/.authinfo")
#+end_src

Also useful to store passwords for later use.

#+begin_src emacs-lisp
(defun fetch-auth-source (&rest params)
(require 'auth-source)
  (let ((match (car (apply #'auth-source-search params))))
    (if match
        (let ((secret (plist-get match :secret)))
          (if (functionp secret)
              (funcall secret)
            secret))
      (error "Password not found for %S" params))))
#+end_src

*** Modeline
Some niceties for the modeline (further config can be found in [[file:modules/ui/exwm/config.el][EXWM Module]])

#+begin_src emacs-lisp
(after! doom-modeline
  (setq doom-modeline-major-mode-icon t
        doom-modeline-major-mode-color-icon t))
#+end_src

*** Magit
Show gravatars where possible

#+begin_src emacs-lisp
(setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
#+end_src

Allow forge to create repos under my name

#+begin_src emacs-lisp
(setq forge-owned-accounts '(("elken")))
#+end_src

*** EShell
**** Prompt
Eshell is a beautiful thing but ootb experience is a tad dated. Custom prompt based on a combination of the famous p10k and eshell-git-prompt. I only /really/ need the minimum out of a prompt:

+ =cwd=; almost impossible to work without knowing the current working directory
+ =git= info; current branch, dirty/clean status, etc
+ prompt number: useful for jumping up and down for fast history in a given session

Can't get enough out of the default powerline theme, and removing a dependancy we're rolling our own prompt called =eshell-p10kline=

#+begin_src emacs-lisp :tangle packages.el
(package! eshell-p10k
  :recipe (:host github :repo "elken/eshell-p10k"))
#+end_src

#+begin_src emacs-lisp
(use-package! eshell-p10k
  :after eshell
  :config
  (setq eshell-prompt-function #'eshell-p10k-prompt-function
        eshell-prompt-regexp eshell-p10k-prompt-string))
#+end_src

**** Settings
We use eshell in a cross platform world, so we should prefer the lisp version of things to ensure a more consistent experience.

#+begin_src emacs-lisp
(setq eshell-prefer-lisp-functions t)
#+end_src

*** User setup
Use my name and emails for things like GPG, snippets, mail, magit, etc. Differs based on which OS I'm on.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Ellis Keny≈ë"
      user-mail-address (if IS-MAC "ellis@coreblue.co.uk" "me@elken.dev"))
#+END_SRC

Email folders and setup. This might move to a new section if I start to use email seriously.

#+begin_src emacs-lisp
(if IS-MAC
    (set-email-account! "gmail"
                        '((mu4e-sent-folder       . "/gmail/Sent Mail")
                          (mu4e-drafts-folder     . "/gmail/Drafts")
                          (mu4e-trash-folder      . "/gmail/Trash")
                          (mu4e-refile-folder     . "/gmail/All Mail")
                          (smtpmail-smtp-user     . "ellis@coreblue.co.uk")
                          (user-mail-address      . "ellis@coreblue.co.uk")) ;; only needed for mu < 1.4
                        t)
  (set-email-account! "mail.elken.dev"
                      '((mu4e-sent-folder       . "/mailbox/Sent Mail")
                        (mu4e-drafts-folder     . "/mailbox/Drafts")
                        (mu4e-trash-folder      . "/mailbox/Trash")
                        (mu4e-refile-folder     . "/mailbox/All Mail")
                        (smtpmail-smtp-user     . "me@elken.dev")
                        (user-mail-address      . "me@elken.dev") ;; only needed for mu < 1.4
                        (mu4e-compose-signature . "Regards,\nelken"))
                      t))

(setq +mu4e-gmail-accounts '(("ellis@coreblue.co.uk" . "/gmail")))
#+end_src

*** Server
Start a server (if not running already)

#+begin_src emacs-lisp
(after! server
  (when (not (server-running-p))
    (server-start)
    (mu4e)))
#+end_src

*** vterm
Vterm clearly wins the terminal war. Also doesn't need much configuration out of the box, although the shell integration does. That currently exists in my [[https://github.com/elken/.files][dotfiles]]

**** Kill buffer
If the process exits, kill the =vterm= buffer

#+begin_src emacs-lisp
(setq vterm-kill-buffer-on-exit t)
#+end_src

**** Fix =c-backspace=
I've picked this up in muscle memory now and I'm fed up with it not working. Not anymore!

#+begin_src emacs-lisp
(after! vterm
  (define-key vterm-mode-map (kbd "<C-backspace>") (lambda () (interactive) (vterm-send-key (kbd "C-w")))))
#+end_src

**** Functions
Useful functions for the shell-side integration provided by vterm.

#+begin_src emacs-lisp
(after! vterm
  (setf (alist-get "magit-status" vterm-eval-cmds nil nil #'equal)
        '((lambda (path)
            (magit-status path)))))
#+end_src

* Keybindings
It's not a custom config without some fancy keybinds

** Defaults
Back to a simpler time...

#+begin_src emacs-lisp
(map! :g "C-s" #'save-buffer)
#+end_src

** Search
+Swiper+ Consult is /much/ better than isearch

#+begin_src emacs-lisp
(map! :after evil :gnvi "C-f" #'consult-line)
#+end_src

** Dired
Dired should behave better with evil mappings

#+begin_src emacs-lisp
(map! :map dired-mode-map
      :n "h" #'dired-up-directory
      :n "l" #'dired-find-alternate-file)
#+end_src

* Graphical setup
** Modeline
Default modeline is a tad cluttered, and because I don't use exwm anymore the
modeline from that module isn't in use. So, it's duplicated here and tweaked.

#+begin_src emacs-lisp
(after! doom-modeline
  (setq all-the-icons-scale-factor 1.1
        doom-modeline-buffer-file-name-style 'relative-to-project
        doom-modeline-vcs-max-length 20)
  (size-indication-mode -1)
  (doom-modeline-def-modeline 'main
    '(bar workspace-name window-number modals persp-name buffer-info matches remote-host github debug)
    '(vcs github mu4e grip gnus checker misc-info repl lsp " ")))
#+end_src
** Fonts
Configure the fonts across all used platforms (slightly different names).

#+BEGIN_SRC emacs-lisp
(setq  doom-font (font-spec :family "Iosevka Nerd Font Mono" :size 13)
       doom-variable-pitch-font (font-spec :family "IBM Plex Sans" :size 13)
       doom-emoji-fallback-font-families nil
       doom-symbol-fallback-font-families nil)
#+END_SRC

** Theme

Load my current flavour-of-the-month colour scheme.

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-nord)
#+END_SRC

Along with a few face overrides (thought about merging upstream but it would have sparked a discussion, maybe later)

#+begin_src emacs-lisp
(custom-theme-set-faces! 'doom-nord
  `(php-class :foreground ,(doom-color 'blue))
  `(php-php-tag :foreground ,(doom-color 'blue))
  `(php-constant :foreground ,(doom-color 'violet))
  `(php-magical-constant :foreground ,(doom-color 'orange))
  `(php-operator :foreground ,(doom-color 'blue))
  `(php-doc-$this :foreground ,(doom-color 'cyan))
  `(php-object-op :foreground ,(doom-color 'cyan))
  `(php-string-op :foreground ,(doom-color 'blue))
  `(php-static-method-call :foreground ,(doom-color 'magenta))
  `(php-method-call :foreground ,(doom-color 'magenta))
  `(php-function-name :foreground ,(doom-lighten 'magenta 0.3)))
#+end_src

Change the default banner (need to add the ASCII banner at some point)

#+BEGIN_SRC emacs-lisp
(setq +doom-dashboard-banner-file (expand-file-name "images/banner.png" doom-private-dir))
#+END_SRC

** Line Numbers
Set the default line number format to be relative and disable line numbers for specific modes
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)

(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** GUI/Frame
Maximise emacs on startup

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

Add some transparency

#+begin_src emacs-lisp
(after! exwm
  (set-frame-parameter (selected-frame) 'alpha 90)
  (add-to-list 'default-frame-alist '(alpha . 90)))
#+end_src

* Org Mode
=org-mode= is a wonderful thing, and far too complex to bury in another section. The more I use it, the more I will add to this area but for now it's mostly used for documentation and organisation.

#+begin_src emacs-lisp
(add-hook! org-mode #'(elken/org-mode-setup elken/org-font-setup))
#+end_src

Let's set a sane default directory based on where I am

#+begin_src emacs-lisp
(setq org-directory (if IS-MAC "/Volumes/me@elken.dev/org" "~/org"))
#+end_src

** Font setup
Font setup to prettify the fonts. Uses IBM Plex Sans in most places except where it makes sense to use the defined fixed width font.

#+BEGIN_SRC emacs-lisp
(defun elken/org-font-setup ()
  ;; Set faces for heading levels
  (font-lock-add-keywords 'org-mode
                          '((":\\(@[^\:]+\\):" (1 'doom-modeline-bar-inactive))))
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "IBM Plex Sans" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-tag nil :foreground nil :inherit '(shadow fixed-pitch) :weight 'bold)
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+END_SRC

** Characters
Simplify the headline bullets

#+begin_src emacs-lisp
(setq org-superstar-headline-bullets-list '("‚Ä∫ "))
#+end_src

And the item bullets

#+begin_src emacs-lisp
(setq org-superstar-item-bullet-alist '((?* . ?‚ãÜ)
                                        (?+ . ?‚Ä£)
                                        (?- . ?‚Ä¢)))
#+end_src

Change the dropdown icon to be something /neater/

#+begin_src emacs-lisp
(setq org-ellipsis " ‚ñæ")
#+end_src

And get rid of emphasis markers

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

Show entities in a nicer format, rather than UTF8 characters

#+begin_src emacs-lisp
(setq org-pretty-entities t)
#+end_src

** Keywords
Default keywords are /far/ too minimal. This will need further tweaking as I start using org mode for organisation more.

#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "PROJ(p)" "STORY(s)" "WAIT(w)" "HOLD(h)" "|" "DONE(d)" "KILL(k)")
          (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)"))))
#+end_src

** Agenda/Log
Enable log-mode so we see =DONE= tasks and the like

#+begin_src emacs-lisp
(setq org-agenda-start-with-log-mode t)
#+end_src

Auto add a timestamp to =DONE= items

#+begin_src emacs-lisp
(setq org-log-done 'time)
#+end_src

And log items in the drawer

#+begin_src emacs-lisp
(setq org-log-into-drawer t)
#+end_src

** Cycle
Cycle by default (no idea why this isn't default)

#+begin_src emacs-lisp
(setq org-cycle-emulate-tab nil)
#+end_src

** Folding
Default folding is very noisy, I /rarely/ need to see everything expanded

#+begin_src emacs-lisp
(setq org-startup-folded 'content)
#+end_src

** Org-appear
Defines a minor mode to allow special forms such as /italics/, *bold*, _underline_ and =literal= to be editable when the cursor is over them, otherwise display the proper value.

#+begin_src emacs-lisp :tangle packages.el
(package! org-appear
  :recipe (:host github :repo "awth13/org-appear"))
#+end_src


Setup for =org-appear= mode
#+begin_src emacs-lisp
(setq org-appear-autoemphasis t
      org-appear-autolinks t
      org-appear-autosubmarkers t)
#+end_src

** Indent & variable pitch
Add the package
#+begin_src emacs-lisp :tangle packages.el
(package! org-variable-pitch
  :recipe (:host github
           :repo "cadadr/elisp"))
#+end_src

Enable =org-indent-mode= by default to properly indent everything automagically, =variable-pitch-mode= to enable the more readable fonts where it makes sense and =visual-line-mode= to add a "current line" selection.

#+BEGIN_SRC emacs-lisp
(defun elken/org-mode-setup ()
  (org-make-toc-mode)
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1)
  (org-variable-pitch-setup)
  (org-appear-mode))
#+END_SRC

** Archive/Cleanup
Adjust the format of archived org files (so they don't show up in orgzly)

#+begin_src emacs-lisp
(setq org-archive-location "archive/Archive_%s::")
#+end_src


Enables archiving of tasks. Replaces the in-built version which only works for single tasks.

#+BEGIN_SRC emacs-lisp
(defun elken/org-archive-done-tasks ()
  "Attempt to archive all done tasks in file"
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/DONE" 'file))

(map! :map org-mode-map :desc "Archive tasks marked DONE" "C-c DEL a" #'elken/org-archive-done-tasks)
#+END_SRC

Enables removal of killed tasks. I'm not /yet/ interested in tracking this long-term.

#+BEGIN_SRC emacs-lisp
(defun elken/org-remove-kill-tasks ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-cut-subtree)
     (pop kill-ring)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/KILL" 'file))

(map! :map org-mode-map :desc "Remove tasks marked as KILL" "C-c DEL k" #'elken/org-remove-kill-tasks)
#+END_SRC

** Show images
Show images inline by default

#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC

** Autoexecute tangled shell files
Make tangled shell files executable (I trust myself, ish...)

#+begin_src emacs-lisp
(defun elken/make-tangled-shell-executable ()
  "Ensure that tangled shell files are executable"
  (set-file-modes (buffer-file-name) #o755))

(add-hook 'org-babel-post-tangle-hook 'elken/make-tangled-shell-executable)
#+end_src

** Weblog setup
Useful settings and functions for [[https://github.com/theiceshell/firn][firn]] and other blogging tools

Testing out weblorg, might encourage me to finally finish my site revamp...

#+begin_src emacs-lisp :tangle packages.el
(package! weblorg)
#+end_src

#+begin_src emacs-lisp
(use-package! weblorg)
#+end_src

#+begin_src emacs-lisp
(setq enable-dir-local-variables t)
(defun elken/find-time-property (property)
  "Find the PROPETY in the current buffer."
  (save-excursion
    (goto-char (point-min))
    (let ((first-heading
           (save-excursion
             (re-search-forward org-outline-regexp-bol nil t))))
      (when (re-search-forward (format "^#\\+%s:" property) nil t)
        (point)))))

(defun elken/has-time-property-p (property)
  "Gets the position of PROPETY if it exists, nil if not and empty string if it's undefined."
  (when-let ((pos (elken/find-time-property property)))
    (save-excursion
      (goto-char pos)
      (if (and (looking-at-p " ")
               (progn (forward-char)
                      (org-at-timestamp-p 'lax)))
          pos
        ""))))

(defun elken/set-time-property (property &optional pos)
  "Set the PROPERTY in the current buffer.
Can pass the position as POS if already computed."
  (when-let ((pos (or pos (elken/find-time-property property))))
    (save-excursion
      (goto-char pos)
      (if (looking-at-p " ")
          (forward-char)
        (insert " "))
      (delete-region (point) (line-end-position))
      (let* ((now (format-time-string "<%Y-%m-%d %H:%M>")))
        (insert now)))))

(add-hook! 'before-save-hook (when (derived-mode-p 'org-mode) (elken/set-time-property "DATE_UPDATED")))
#+end_src

** Visual column mode
Enable =visual-fill-column-mode= to center an org document for nicer editing.

First we need the package

#+begin_src emacs-lisp :tangle packages.el
(package! visual-fill-column)
#+end_src

Then we define a setup function

#+BEGIN_SRC emacs-lisp
(defun elken/org-mode-visual-fill ()
  (setq visual-fill-column-width 200
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))
#+END_SRC

And add a hook to load it

#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'elken/org-mode-visual-fill)
#+end_src

** org-make-toc
There's still a few bugs with this, but it works fine on Github mostly.

#+begin_src emacs-lisp :tangle packages.el
(package! org-make-toc)
#+end_src

And then load it

#+begin_src emacs-lisp
(use-package! org-make-toc
  :after org
  :config
  (setq org-make-toc-link-type-fn #'org-make-toc--link-entry-org))
#+end_src

** Better snippets
Programmers are, by design, lazy

#+begin_src emacs-lisp
(use-package! org-tempo
  :after org
  :init
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+end_src

** Roam
Let's jump on the bandwagon and start taking useful notes.

#+begin_src emacs-lisp
(setq org-roam-directory (expand-file-name "roam" org-directory))
#+end_src

** Capture
It's about time I start using =org-capture=, but because I'm a developer I'm inhernetly lazy so time to steal from other people.

Useful wrapper package for creating more declarative templates
#+begin_src emacs-lisp :tangle packages.el
(package! doct)
#+end_src

#+begin_src emacs-lisp
(use-package! doct
  :commands (doct))
#+end_src

*** Prettify
Improve the look of the capture dialog (idea borrowed from [[https://github.com/tecosaur][tecosaur]])
#+begin_src emacs-lisp
(defun org-capture-select-template-prettier (&optional keys)
  "Select a capture template, in a prettier way than default
Lisp programs can force the template by setting KEYS to a string."
  (let ((org-capture-templates
         (or (org-contextualize-keys
              (org-capture-upgrade-templates org-capture-templates)
              org-capture-templates-contexts)
             '(("t" "Task" entry (file+headline "" "Tasks")
                "* TODO %?\n  %u\n  %a")))))
    (if keys
        (or (assoc keys org-capture-templates)
            (error "No capture template referred to by \"%s\" keys" keys))
      (org-mks org-capture-templates
               "Select a capture template\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
               "Template key: "
               `(("q" ,(concat (all-the-icons-octicon "stop" :face 'all-the-icons-red :v-adjust 0.01) "\tAbort")))))))
(advice-add 'org-capture-select-template :override #'org-capture-select-template-prettier)

(defun org-mks-pretty (table title &optional prompt specials)
  "Select a member of an alist with multiple keys. Prettified.

TABLE is the alist which should contain entries where the car is a string.
There should be two types of entries.

1. prefix descriptions like (\"a\" \"Description\")
   This indicates that `a' is a prefix key for multi-letter selection, and
   that there are entries following with keys like \"ab\", \"ax\"‚Ä¶

2. Select-able members must have more than two elements, with the first
   being the string of keys that lead to selecting it, and the second a
   short description string of the item.

The command will then make a temporary buffer listing all entries
that can be selected with a single key, and all the single key
prefixes.  When you press the key for a single-letter entry, it is selected.
When you press a prefix key, the commands (and maybe further prefixes)
under this key will be shown and offered for selection.

TITLE will be placed over the selection in the temporary buffer,
PROMPT will be used when prompting for a key.  SPECIALS is an
alist with (\"key\" \"description\") entries.  When one of these
is selected, only the bare key is returned."
  (save-window-excursion
    (let ((inhibit-quit t)
          (buffer (org-switch-to-buffer-other-window "*Org Select*"))
          (prompt (or prompt "Select: "))
          case-fold-search
          current)
      (unwind-protect
          (catch 'exit
            (while t
              (setq-local evil-normal-state-cursor (list nil))
              (erase-buffer)
              (insert title "\n\n")
              (let ((des-keys nil)
                    (allowed-keys '("\C-g"))
                    (tab-alternatives '("\s" "\t" "\r"))
                    (cursor-type nil))
                ;; Populate allowed keys and descriptions keys
                ;; available with CURRENT selector.
                (let ((re (format "\\`%s\\(.\\)\\'"
                                  (if current (regexp-quote current) "")))
                      (prefix (if current (concat current " ") "")))
                  (dolist (entry table)
                    (pcase entry
                      ;; Description.
                      (`(,(and key (pred (string-match re))) ,desc)
                       (let ((k (match-string 1 key)))
                         (push k des-keys)
                         ;; Keys ending in tab, space or RET are equivalent.
                         (if (member k tab-alternatives)
                             (push "\t" allowed-keys)
                           (push k allowed-keys))
                         (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) (propertize "‚Ä∫" 'face 'font-lock-comment-face) "  " desc "‚Ä¶" "\n")))
                      ;; Usable entry.
                      (`(,(and key (pred (string-match re))) ,desc . ,_)
                       (let ((k (match-string 1 key)))
                         (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) "   " desc "\n")
                         (push k allowed-keys)))
                      (_ nil))))
                ;; Insert special entries, if any.
                (when specials
                  (insert "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n")
                  (pcase-dolist (`(,key ,description) specials)
                    (insert (format "%s   %s\n" (propertize key 'face '(bold all-the-icons-red)) description))
                    (push key allowed-keys)))
                ;; Display UI and let user select an entry or
                ;; a sub-level prefix.
                (goto-char (point-min))
                (unless (pos-visible-in-window-p (point-max))
                  (org-fit-window-to-buffer))
                (let ((pressed (org--mks-read-key allowed-keys prompt nil)))
                  (setq current (concat current pressed))
                  (cond
                   ((equal pressed "\C-g") (user-error "Abort"))
                   ((equal pressed "ESC") (user-error "Abort"))
                   ;; Selection is a prefix: open a new menu.
                   ((member pressed des-keys))
                   ;; Selection matches an association: return it.
                   ((let ((entry (assoc current table)))
                      (and entry (throw 'exit entry))))
                   ;; Selection matches a special entry: return the
                   ;; selection prefix.
                   ((assoc current specials) (throw 'exit current))
                   (t (error "No entry available")))))))
        (when buffer (kill-buffer buffer))))))
(advice-add 'org-mks :override #'org-mks-pretty)
#+end_src

The [[file:~/.emacs.doom/bin/org-capture][org-capture bin]] is rather nice, but I'd be nicer with a smaller frame, and
no modeline.

#+begin_src emacs-lisp
(setf (alist-get 'height +org-capture-frame-parameters) 15)
;; (alist-get 'name +org-capture-frame-parameters) "‚ùñ Capture") ;; ATM hardcoded in other places, so changing breaks stuff
(setq +org-capture-fn
      (lambda ()
        (interactive)
        (set-window-parameter nil 'mode-line-format 'none)
        (org-capture)))
#+end_src

Sprinkle in some =doct= utility functions
#+begin_src emacs-lisp
(defun +doct-icon-declaration-to-icon (declaration)
  "Convert :icon declaration to icon"
  (let ((name (pop declaration))
        (set  (intern (concat "all-the-icons-" (plist-get declaration :set))))
        (face (intern (concat "all-the-icons-" (plist-get declaration :color))))
        (v-adjust (or (plist-get declaration :v-adjust) 0.01)))
    (apply set `(,name :face ,face :v-adjust ,v-adjust))))

(defun +doct-iconify-capture-templates (groups)
  "Add declaration's :icon to each template group in GROUPS."
  (let ((templates (doct-flatten-lists-in groups)))
    (setq doct-templates (mapcar (lambda (template)
                                   (when-let* ((props (nthcdr (if (= (length template) 4) 2 5) template))
                                               (spec (plist-get (plist-get props :doct) :icon)))
                                     (setf (nth 1 template) (concat (+doct-icon-declaration-to-icon spec)
                                                                    "\t"
                                                                    (nth 1 template))))
                                   template)
                                 templates))))

(setq doct-after-conversion-functions '(+doct-iconify-capture-templates))
#+end_src

*** Templates

And we can now add some templates! This isn't even remotely set in stone, I wouldn't even describe them as set in /jelly/ really.
#+begin_src emacs-lisp
(setq org-capture-templates
      (doct `(("Home" :keys "h"
               :icon ("home" :set "octicon" :color "cyan")
               :file "Home.org"
               :prepend t
               :headline "Inbox"
               :template ("* TODO %?"
                          "%i %a"))
              ("Work" :keys "w"
               :icon ("business" :set "material" :color "yellow")
               :file "Work.org"
               :prepend t
               :headline "Inbox"
               :template ("* TODO %?"
                          "SCHEDULED: %^{Schedule:}t"
                          "DEADLINE: %^{Deadline:}t"
                          "%i %a"))
              ("Note" :keys "n"
               :icon ("sticky-note" :set "faicon" :color "yellow")
               :file "Notes.org"
               :template ("* *?"
                          "%i %a"))
              ("Project" :keys "p"
               :icon ("repo" :set "octicon" :color "silver")
               :prepend t
               :type entry
               :headline "Inbox"
               :template ("* %{keyword} %?"
                          "%i"
                          "%a")
               :file ""
               :custom (:keyword "")
               :children (("Task" :keys "t"
                           :icon ("checklist" :set "octicon" :color "green")
                           :keyword "TODO"
                           :file +org-capture-project-todo-file)
                          ("Note" :keys "n"
                           :icon ("sticky-note" :set "faicon" :color "yellow")
                           :keyword "%U"
                           :file +org-capture-project-notes-file)))
              )))
#+end_src

** Export
*** LaTeX
A necessary evil. I hate it, it hates me, but it makes my PDF documents look nice.

**** Conditional features

#+begin_src emacs-lisp
(defvar org-latex-italic-quotes t
  "Make \"quote\" environments italic.")
(defvar org-latex-par-sep t
  "Vertically seperate paragraphs, and remove indentation.")

(defvar org-latex-conditional-features
  '(("\\[\\[\\(?:file\\|https?\\):\\(?:[^]]\\|\\\\\\]\\)+?\\.\\(?:eps\\|pdf\\|png\\|jpeg\\|jpg\\|jbig2\\)\\]\\]" . image)
    ("\\[\\[\\(?:file\\|https?\\):\\(?:[^]]+?\\|\\\\\\]\\)\\.svg\\]\\]" . svg)
    ("^[ \t]*|" . table)
    ("cref:\\|\\cref{\\|\\[\\[[^\\]]+\\]\\]" . cleveref)
    ("[;\\\\]?\\b[A-Z][A-Z]+s?[^A-Za-z]" . acronym)
    ("\\+[^ ].*[^ ]\\+\\|_[^ ].*[^ ]_\\|\\\\uu?line\\|\\\\uwave\\|\\\\sout\\|\\\\xout\\|\\\\dashuline\\|\\dotuline\\|\\markoverwith" . underline)
    (":float wrap" . float-wrap)
    (":float sideways" . rotate)
    ("^[ \t]*#\\+caption:\\|\\\\caption" . caption)
    ("\\[\\[xkcd:" . (image caption))
    ((and org-latex-italic-quotes "^[ \t]*#\\+begin_quote\\|\\\\begin{quote}") . italic-quotes)
    (org-latex-par-sep . par-sep)
    ("^[ \t]*\\(?:[-+*]\\|[0-9]+[.)]\\|[A-Za-z]+[.)]\\) \\[[ -X]\\]" . checkbox)
    ("^[ \t]*#\\+begin_warning\\|\\\\begin{warning}" . box-warning)
    ("^[ \t]*#\\+begin_info\\|\\\\begin{info}"       . box-info)
    ("^[ \t]*#\\+begin_success\\|\\\\begin{success}" . box-success)
    ("^[ \t]*#\\+begin_error\\|\\\\begin{error}"     . box-error))
  "Org feature tests and associated LaTeX feature flags.

Alist where the car is a test for the presense of the feature,
and the cdr is either a single feature symbol or list of feature symbols.

When a string, it is used as a regex search in the buffer.
The feature is registered as present when there is a match.

The car can also be a
- symbol, the value of which is fetched
- function, which is called with info as an argument
- list, which is `eval'uated

If the symbol, function, or list produces a string: that is used as a regex
search in the buffer. Otherwise any non-nil return value will indicate the
existance of the feature.")
#+end_src

#+begin_src emacs-lisp
(defvar org-latex-caption-preamble "
\\usepackage{subcaption}
\\usepackage[hypcap=true]{caption}
\\setkomafont{caption}{\\sffamily\\small}
\\setkomafont{captionlabel}{\\upshape\\bfseries}
\\captionsetup{justification=raggedright,singlelinecheck=true}
\\usepackage{capt-of} % required by Org
"
  "Preamble that improves captions.")

(defvar org-latex-checkbox-preamble "
\\newcommand{\\checkboxUnchecked}{$\\square$}
\\newcommand{\\checkboxTransitive}{\\rlap{\\raisebox{-0.1ex}{\\hspace{0.35ex}\\Large\\textbf -}}$\\square$}
\\newcommand{\\checkboxChecked}{\\rlap{\\raisebox{0.2ex}{\\hspace{0.35ex}\\scriptsize \\ding{52}}}$\\square$}
"
  "Preamble that improves checkboxes.")

(defvar org-latex-box-preamble "
% args = #1 Name, #2 Colour, #3 Ding, #4 Label
\\newcommand{\\defsimplebox}[4]{%
  \\definecolor{#1}{HTML}{#2}
  \\newenvironment{#1}[1][]
  {%
    \\par\\vspace{-0.7\\baselineskip}%
    \\textcolor{#1}{#3} \\textcolor{#1}{\\textbf{\\def\\temp{##1}\\ifx\\temp\\empty#4\\else##1\\fi}}%
    \\vspace{-0.8\\baselineskip}
    \\begin{addmargin}[1em]{1em}
  }{%
    \\end{addmargin}
    \\vspace{-0.5\\baselineskip}
  }%
}
"
  "Preamble that provides a macro for custom boxes.")
#+end_src

#+begin_src emacs-lisp
(defvar org-latex-feature-implementations
  '((image         :snippet "\\usepackage{graphicx}" :order 2)
    (svg           :snippet "\\usepackage{svg}" :order 2)
    (table         :snippet "\\usepackage{longtable}\n\\usepackage{booktabs}" :order 2)
    (cleveref      :snippet "\\usepackage[capitalize]{cleveref}" :order 1)
    (underline     :snippet "\\usepackage[normalem]{ulem}" :order 0.5)
    (float-wrap    :snippet "\\usepackage{wrapfig}" :order 2)
    (rotate        :snippet "\\usepackage{rotating}" :order 2)
    (caption       :snippet org-latex-caption-preamble :order 2.1)
    (acronym       :snippet "\\newcommand{\\acr}[1]{\\protect\\textls*[110]{\\scshape #1}}\n\\newcommand{\\acrs}{\\protect\\scalebox{.91}[.84]{\\hspace{0.15ex}s}}" :order 0.4)
    (italic-quotes :snippet "\\renewcommand{\\quote}{\\list{}{\\rightmargin\\leftmargin}\\item\\relax\\em}\n" :order 0.5)
    (par-sep       :snippet "\\setlength{\\parskip}{\\baselineskip}\n\\setlength{\\parindent}{0pt}\n" :order 0.5)
    (.pifont       :snippet "\\usepackage{pifont}")
    (checkbox      :requires .pifont :order 3
                   :snippet (concat (unless (memq 'maths features)
                                      "\\usepackage{amssymb} % provides \\square")
                                    org-latex-checkbox-preamble))
    (.fancy-box    :requires .pifont    :snippet org-latex-box-preamble :order 3.9)
    (box-warning   :requires .fancy-box :snippet "\\defsimplebox{warning}{e66100}{\\ding{68}}{Warning}" :order 4)
    (box-info      :requires .fancy-box :snippet "\\defsimplebox{info}{3584e4}{\\ding{68}}{Information}" :order 4)
    (box-success   :requires .fancy-box :snippet "\\defsimplebox{success}{26a269}{\\ding{68}}{\\vspace{-\\baselineskip}}" :order 4)
    (box-error     :requires .fancy-box :snippet "\\defsimplebox{error}{c01c28}{\\ding{68}}{Important}" :order 4))
  "LaTeX features and details required to implement them.

List where the car is the feature symbol, and the rest forms a plist with the
following keys:
- :snippet, which may be either
  - a string which should be included in the preamble
  - a symbol, the value of which is included in the preamble
  - a function, which is evaluated with the list of feature flags as its
    single argument. The result of which is included in the preamble
  - a list, which is passed to `eval', with a list of feature flags available
    as \"features\"

- :requires, a feature or list of features that must be available
- :when, a feature or list of features that when all available should cause this
    to be automatically enabled.
- :prevents, a feature or list of features that should be masked
- :order, for when ordering is important. Lower values appear first.
    The default is 0.

Features that start with ! will be eagerly loaded, i.e. without being detected.")
#+end_src

#+begin_src emacs-lisp
(defun org-latex-detect-features (&optional buffer info)
  "List features from `org-latex-conditional-features' detected in BUFFER."
  (let ((case-fold-search nil))
    (with-current-buffer (or buffer (current-buffer))
      (delete-dups
       (mapcan (lambda (construct-feature)
                 (when (let ((out (pcase (car construct-feature)
                                    ((pred stringp) (car construct-feature))
                                    ((pred functionp) (funcall (car construct-feature) info))
                                    ((pred listp) (eval (car construct-feature)))
                                    ((pred symbolp) (symbol-value (car construct-feature)))
                                    (_ (user-error "org-latex-conditional-features key %s unable to be used" (car construct-feature))))))
                         (if (stringp out)
                             (save-excursion
                               (goto-char (point-min))
                               (re-search-forward out nil t))
                           out))
                   (if (listp (cdr construct-feature)) (cdr construct-feature) (list (cdr construct-feature)))))
               org-latex-conditional-features)))))
#+end_src

#+begin_src emacs-lisp
(defun org-latex-expand-features (features)
  "For each feature in FEATURES process :requires, :when, and :prevents keywords and sort according to :order."
  (dolist (feature features)
    (unless (assoc feature org-latex-feature-implementations)
      (error "Feature %s not provided in org-latex-feature-implementations" feature)))
  (setq current features)
  (while current
    (when-let ((requirements (plist-get (cdr (assq (car current) org-latex-feature-implementations)) :requires)))
      (setcdr current (if (listp requirements)
                          (append requirements (cdr current))
                        (cons requirements (cdr current)))))
    (setq current (cdr current)))
  (dolist (potential-feature
           (append features (delq nil (mapcar (lambda (feat)
                                                (when (plist-get (cdr feat) :eager)
                                                  (car feat)))
                                              org-latex-feature-implementations))))
    (when-let ((prerequisites (plist-get (cdr (assoc potential-feature org-latex-feature-implementations)) :when)))
      (setf features (if (if (listp prerequisites)
                             (cl-every (lambda (preq) (memq preq features)) prerequisites)
                           (memq prerequisites features))
                         (append (list potential-feature) features)
                       (delq potential-feature features)))))
  (dolist (feature features)
    (when-let ((prevents (plist-get (cdr (assoc feature org-latex-feature-implementations)) :prevents)))
      (setf features (cl-set-difference features (if (listp prevents) prevents (list prevents))))))
  (sort (delete-dups features)
        (lambda (feat1 feat2)
          (if (< (or (plist-get (cdr (assoc feat1 org-latex-feature-implementations)) :order) 1)
                 (or (plist-get (cdr (assoc feat2 org-latex-feature-implementations)) :order) 1))
              t nil))))
#+end_src

#+begin_src emacs-lisp
(defun org-latex-generate-features-preamble (features)
  "Generate the LaTeX preamble content required to provide FEATURES.
This is done according to `org-latex-feature-implementations'"
  (let ((expanded-features (org-latex-expand-features features)))
    (concat
     (format "\n%% features: %s\n" expanded-features)
     (mapconcat (lambda (feature)
                  (when-let ((snippet (plist-get (cdr (assoc feature org-latex-feature-implementations)) :snippet)))
                    (concat
                     (pcase snippet
                       ((pred stringp) snippet)
                       ((pred functionp) (funcall snippet features))
                       ((pred listp) (eval `(let ((features ',features)) (,@snippet))))
                       ((pred symbolp) (symbol-value snippet))
                       (_ (user-error "org-latex-feature-implementations :snippet value %s unable to be used" snippet)))
                     "\n")))
                expanded-features
                "")
     "% end features\n")))
#+end_src

#+begin_src emacs-lisp
(defvar info--tmp nil)

(defadvice! org-latex-save-info (info &optional t_ s_)
  :before #'org-latex-make-preamble
  (setq info--tmp info))

(defadvice! org-splice-latex-header-and-generated-preamble-a (orig-fn tpl def-pkg pkg snippets-p &optional extra)
  "Dynamically insert preamble content based on `org-latex-conditional-preambles'."
  :around #'org-splice-latex-header
  (let ((header (funcall orig-fn tpl def-pkg pkg snippets-p extra)))
    (if snippets-p header
      (concat header
              (org-latex-generate-features-preamble (org-latex-detect-features nil info--tmp))
              "\n"))))
#+end_src

**** Tectonic
Tectonic is the hot new thing, which also means I can get rid of my tex installation.

#+begin_src emacs-lisp
(setq-default org-latex-pdf-process '("tectonic --outdir=%o %f"))
#+end_src

**** Classes
Now for some class setup (likely to change over time)

#+begin_src emacs-lisp
(after! ox-latex
  (add-to-list 'org-latex-classes
               '("cb-doc" "\\documentclass{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

And some saner default for them

#+begin_src emacs-lisp
(after! ox-latex
  (setq org-latex-default-class "cb-doc"
        org-latex-tables-booktabs t
        org-latex-hyperref-template "\\colorlet{greenyblue}{blue!70!green}
\\colorlet{blueygreen}{blue!40!green}
\\providecolor{link}{named}{greenyblue}
\\providecolor{cite}{named}{blueygreen}
\\hypersetup{
  pdfauthor={%a},
  pdftitle={%t},
  pdfkeywords={%k},
  pdfsubject={%d},
  pdfcreator={%c},
  pdflang={%L},
  breaklinks=true,
  colorlinks=true,
  linkcolor=,
  urlcolor=link,
  citecolor=cite\n}
\\urlstyle{same}
"
        org-latex-reference-command "\\cref{%s}"))
#+end_src

**** Packages
Add some packages (also very likely to change)

#+begin_src emacs-lisp
(setq org-latex-default-packages-alist
      `(("AUTO" "inputenc" t
         ("pdflatex"))
        ("T1" "fontenc" t
         ("pdflatex"))
        ("" "fontspec" t)
        ("" "graphicx" t)
        ("" "grffile" t)
        ("" "longtable" nil)
        ("" "wrapfig" nil)
        ("" "rotating" nil)
        ("normalem" "ulem" t)
        ("" "amsmath" t)
        ("" "textcomp" t)
        ("" "amssymb" t)
        ("" "capt-of" nil)
        ("dvipsnames" "xcolor" nil)
        ("colorlinks=true, linkcolor=Blue, citecolor=BrickRed, urlcolor=PineGreen" "hyperref" nil)
    ("" "indentfirst" nil)
    "\\setmainfont[Ligatures=TeX]{IBM Plex Sans}"
    "\\setmonofont[Ligatures=TeX]{Iosevka Nerd Font Mono}"))
#+end_src

**** Pretty code blocks
Teco is the goto for this, so basically just ripping off him.

#+begin_src emacs-lisp :tangle packages.el
(package! engrave-recipes
  :recipe (:host github :repo "tecosaur/engrave-faces"))
#+end_src

#+begin_src emacs-lisp
(use-package! engrave-faces-latex
  :after ox-latex
  :config
  (setq org-latex-listings 'engraved))
#+end_src

#+begin_src emacs-lisp
(defadvice! org-latex-src-block-engraved (orig-fn src-block contents info)
  "Like `org-latex-src-block', but supporting an engraved backend"
  :around #'org-latex-src-block
  (if (eq 'engraved (plist-get info :latex-listings))
      (org-latex-scr-block--engraved src-block contents info)
    (funcall orig-fn src-block contents info)))

(defadvice! org-latex-inline-src-block-engraved (orig-fn inline-src-block contents info)
  "Like `org-latex-inline-src-block', but supporting an engraved backend"
  :around #'org-latex-inline-src-block
  (if (eq 'engraved (plist-get info :latex-listings))
      (org-latex-inline-scr-block--engraved inline-src-block contents info)
    (funcall orig-fn src-block contents info)))

(defvar-local org-export-has-code-p nil)

(defadvice! org-export-expect-no-code (&rest _)
  :before #'org-export-as
  (setq org-export-has-code-p nil))

(defadvice! org-export-register-code (&rest _)
  :after #'org-latex-src-block-engraved
  :after #'org-latex-inline-src-block-engraved
  (setq org-export-has-code-p t))

(setq org-latex-engraved-code-preamble "
\\usepackage{fvextra}
\\fvset{
  commandchars=\\\\\\{\\},
  highlightcolor=white!95!black!80!blue,
  breaklines=true,
  breaksymbol=\\color{white!60!black}\\tiny\\ensuremath{\\hookrightarrow}}
\\renewcommand\\theFancyVerbLine{\\footnotesize\\color{black!40!white}\\arabic{FancyVerbLine}}

\\definecolor{codebackground}{HTML}{f7f7f7}
\\definecolor{codeborder}{HTML}{f0f0f0}

% TODO have code boxes keep line vertical alignment
\\usepackage[breakable,xparse]{tcolorbox}
\\DeclareTColorBox[]{Code}{o}%
{colback=codebackground, colframe=codeborder,
  fontupper=\\footnotesize,
  colupper=EFD,
  IfNoValueTF={#1}%
  {boxsep=2pt, arc=2.5pt, outer arc=2.5pt,
    boxrule=0.5pt, left=2pt}%
  {boxsep=2.5pt, arc=0pt, outer arc=0pt,
    boxrule=0pt, leftrule=1.5pt, left=0.5pt},
  right=2pt, top=1pt, bottom=0.5pt,
  breakable}
")

(add-to-list 'org-latex-conditional-features '((and org-export-has-code-p "^[ \t]*#\\+begin_src\\|^[ \t]*#\\+BEGIN_SRC\\|src_[A-Za-z]") . engraved-code) t)
(add-to-list 'org-latex-conditional-features '("^[ \t]*#\\+begin_example\\|^[ \t]*#\\+BEGIN_EXAMPLE" . engraved-code-setup) t)
(add-to-list 'org-latex-feature-implementations '(engraved-code :requires engraved-code-setup :snippet (engrave-faces-latex-gen-preamble) :order 99) t)
(add-to-list 'org-latex-feature-implementations '(engraved-code-setup :snippet org-latex-engraved-code-preamble :order 98) t)

(defun org-latex-scr-block--engraved (src-block contents info)
  (let* ((lang (org-element-property :language src-block))
         (attributes (org-export-read-attribute :attr_latex src-block))
         (float (plist-get attributes :float))
         (num-start (org-export-get-loc src-block info))
         (retain-labels (org-element-property :retain-labels src-block))
         (caption (org-element-property :caption src-block))
         (caption-above-p (org-latex--caption-above-p src-block info))
         (caption-str (org-latex--caption/label-string src-block info))
         (placement (or (org-unbracket-string "[" "]" (plist-get attributes :placement))
                        (plist-get info :latex-default-figure-position)))
         (float-env
          (cond
           ((string= "multicolumn" float)
            (format "\\begin{listing*}[%s]\n%s%%s\n%s\\end{listing*}"
                    placement
                    (if caption-above-p caption-str "")
                    (if caption-above-p "" caption-str)))
           (caption
            (format "\\begin{listing}[%s]\n%s%%s\n%s\\end{listing}"
                    placement
                    (if caption-above-p caption-str "")
                    (if caption-above-p "" caption-str)))
           ((string= "t" float)
            (concat (format "\\begin{listing}[%s]\n"
                            placement)
                    "%s\n\\end{listing}"))
           (t "%s")))
         (options (plist-get info :latex-minted-options))
         (content-buffer
          (with-temp-buffer
            (insert
             (let* ((code-info (org-export-unravel-code src-block))
                    (max-width
                     (apply 'max
                            (mapcar 'length
                                    (org-split-string (car code-info)
                                                      "\n")))))
               (org-export-format-code
                (car code-info)
                (lambda (loc _num ref)
                  (concat
                   loc
                   (when ref
                     ;; Ensure references are flushed to the right,
                     ;; separated with 6 spaces from the widest line
                     ;; of code.
                     (concat (make-string (+ (- max-width (length loc)) 6)
                                          ?\s)
                             (format "(%s)" ref)))))
                nil (and retain-labels (cdr code-info)))))
            (funcall (org-src-get-lang-mode lang))
            (engrave-faces-latex-buffer)))
         (content
          (with-current-buffer content-buffer
            (buffer-string)))
         (body
          (format
           "\\begin{Code}\n\\begin{Verbatim}[%s]\n%s\\end{Verbatim}\n\\end{Code}"
           ;; Options.
           (concat
            (org-latex--make-option-string
             (if (or (not num-start) (assoc "linenos" options))
                 options
               (append
                `(("linenos")
                  ("firstnumber" ,(number-to-string (1+ num-start))))
                options)))
            (let ((local-options (plist-get attributes :options)))
              (and local-options (concat "," local-options))))
           content)))
    (kill-buffer content-buffer)
    ;; Return value.
    (format float-env body)))

(defun org-latex-inline-scr-block--engraved (inline-src-block _contents info)
  (let ((options (org-latex--make-option-string
                  (plist-get info :latex-minted-options)))
        code-buffer code)
    (setq code-buffer
          (with-temp-buffer
            (insert (org-element-property :value inline-src-block))
            (funcall (org-src-get-lang-mode
                      (org-element-property :language inline-src-block)))
            (engrave-faces-latex-buffer)))
    (setq code (with-current-buffer code-buffer
                 (buffer-string)))
    (kill-buffer code-buffer)
    (format "\\Verb%s{%s}"
            (if (string= options "") ""
              (format "[%s]" options))
            code)))

(defadvice! org-latex-example-block-engraved (orig-fn example-block contents info)
  "Like `org-latex-example-block', but supporting an engraved backend"
  :around #'org-latex-example-block
  (let ((output-block (funcall orig-fn example-block contents info)))
    (if (eq 'engraved (plist-get info :latex-listings))
        (format "\\begin{Code}[alt]\n%s\n\\end{Code}" output-block)
      output-block)))
#+end_src

**** Chameleon
Attempt to improve default PDF export by using the current theme

#+begin_src elisp
(after! ox
  (defvar ox-chameleon-base-class "cb-doc"
    "The base class that chameleon builds on")

  (defvar ox-chameleon--p nil
    "Used to indicate whether the current export is trying to blend in. Set just before being accessed.")

  (defadvice! ox-chameleon-org-latex-detect (orig-fun info)
    :around #'org-export-install-filters
    (setq ox-chameleon--p (when (equal (plist-get info :latex-class)
                                       "chameleon")
                            (plist-put info :latex-class ox-chameleon-base-class)
                            (setq engrave-faces-preset-styles (engrave-faces-generate-preset))
                            t))
    (funcall orig-fun info))

  (defadvice! ox-chameleon-org-latex-export (orig-fn info &optional template snippet?)
    :around #'org-latex-make-preamble
    (if ox-chameleon--p
        (let ((engrave-faces-preset-styles (engrave-faces-generate-preset)))
          (concat (funcall orig-fn info template snippet?)
                  (ox-chameleon-generate-colourings)))
      (funcall orig-fn info template snippet?)))

  (defun ox-chameleon-generate-colourings ()
    (apply #'format
           "%% make document follow Emacs theme
\\definecolor{bg}{HTML}{%s}
\\definecolor{fg}{HTML}{%s}

\\definecolor{red}{HTML}{%s}
\\definecolor{orange}{HTML}{%s}
\\definecolor{green}{HTML}{%s}
\\definecolor{teal}{HTML}{%s}
\\definecolor{yellow}{HTML}{%s}
\\definecolor{blue}{HTML}{%s}
\\definecolor{dark-blue}{HTML}{%s}
\\definecolor{magenta}{HTML}{%s}
\\definecolor{violet}{HTML}{%s}
\\definecolor{cyan}{HTML}{%s}
\\definecolor{dark-cyan}{HTML}{%s}

\\definecolor{documentTitle}{HTML}{%s}
\\definecolor{documentInfo}{HTML}{%s}
\\definecolor{level1}{HTML}{%s}
\\definecolor{level2}{HTML}{%s}
\\definecolor{level3}{HTML}{%s}
\\definecolor{level4}{HTML}{%s}
\\definecolor{level5}{HTML}{%s}
\\definecolor{level6}{HTML}{%s}
\\definecolor{level7}{HTML}{%s}
\\definecolor{level8}{HTML}{%s}

\\definecolor{link}{HTML}{%s}
\\definecolor{cite}{HTML}{%s}
\\definecolor{itemlabel}{HTML}{%s}
\\definecolor{code}{HTML}{%s}
\\definecolor{verbatim}{HTML}{%s}

\\definecolor{codebackground}{HTML}{%s}
\\colorlet{EFD}{fg}
\\definecolor{codeborder}{HTML}{%s}

\\pagecolor{bg}
\\color{fg}

\\addtokomafont{title}{\\color{documentTitle}}
\\addtokomafont{author}{\\color{documentInfo}}
\\addtokomafont{date}{\\color{documentInfo}}
\\addtokomafont{section}{\\color{level1}}
\\newkomafont{sectionprefix}{\\color{level1}}
\\addtokomafont{subsection}{\\color{level2}}
\\newkomafont{subsectionprefix}{\\color{level2}}
\\addtokomafont{subsubsection}{\\color{level3}}
\\newkomafont{subsubsectionprefix}{\\color{level3}}
\\addtokomafont{paragraph}{\\color{level4}}
\\newkomafont{paragraphprefix}{\\color{level4}}
\\addtokomafont{subparagraph}{\\color{level5}}
\\newkomafont{subparagraphprefix}{\\color{level5}}

\\renewcommand{\\labelitemi}{\\textcolor{itemlabel}{\\textbullet}}
\\renewcommand{\\labelitemii}{\\textcolor{itemlabel}{\\normalfont\\bfseries \\textendash}}
\\renewcommand{\\labelitemiii}{\\textcolor{itemlabel}{\\textasteriskcentered}}
\\renewcommand{\\labelitemiv}{\\textcolor{itemlabel}{\\textperiodcentered}}

\\renewcommand{\\labelenumi}{\\textcolor{itemlabel}{\\theenumi.}}
\\renewcommand{\\labelenumii}{\\textcolor{itemlabel}{(\\theenumii)}}
\\renewcommand{\\labelenumiii}{\\textcolor{itemlabel}{\\theenumiii.}}
\\renewcommand{\\labelenumiv}{\\textcolor{itemlabel}{\\theenumiv.}}

\\DeclareTextFontCommand{\\texttt}{\\color{code}\\ttfamily}
\\makeatletter
\\def\\verbatim@font{\\color{verbatim}\\normalfont\\ttfamily}
\\makeatother
%% end customisations
"
           (mapcar (doom-rpartial #'substring 1)
                   (list
                    (face-attribute 'solaire-default-face :background)
                    (face-attribute 'default :foreground)
                    ;;
                    (doom-color 'red)
                    (doom-color 'orange)
                    (doom-color 'green)
                    (doom-color 'teal)
                    (doom-color 'yellow)
                    (doom-color 'blue)
                    (doom-color 'dark-blue)
                    (doom-color 'magenta)
                    (doom-color 'violet)
                    (doom-color 'cyan)
                    (doom-color 'dark-cyan)
                    ;;
                    (face-attribute 'org-document-title :foreground)
                    (face-attribute 'org-document-info :foreground)
                    (face-attribute 'outline-1 :foreground)
                    (face-attribute 'outline-2 :foreground)
                    (face-attribute 'outline-3 :foreground)
                    (face-attribute 'outline-4 :foreground)
                    (face-attribute 'outline-5 :foreground)
                    (face-attribute 'outline-6 :foreground)
                    (face-attribute 'outline-7 :foreground)
                    (face-attribute 'outline-8 :foreground)
                    ;;
                    (face-attribute 'link :foreground)
                    (doom-color 'yellow)
                    (face-attribute 'org-list-dt :foreground)
                    (face-attribute 'org-code :foreground)
                    (face-attribute 'org-verbatim :foreground)
                    ;;
                    (face-attribute 'org-block :background)
                    (doom-blend (face-attribute 'default :background)
                                (face-attribute 'default :foreground)
                                0.95))))))
#+end_src

* Email
Currently handled through =mu4e=, works easy enough and I don't need too much out of email.

Set the interval to a sensible timeout (10 minutes is plenty)
#+begin_src emacs-lisp
(setq mu4e-update-interval 300)
#+end_src

Improve performance as we only use gmail here.

#+begin_src emacs-lisp
;; don't need to run cleanup after indexing for gmail
(setq mu4e-index-cleanup nil
      ;; because gmail uses labels as folders we can use lazy check since
      ;; messages don't really "move"
      mu4e-index-lazy-check t)
#+end_src

** Sending email
Handled via =msmtp=, mostly because teco said so. We don't question teco.

#+begin_src emacs-lisp
(setq sendmail-program "/opt/homebrew/bin/msmtp"
        send-mail-function #'smtpmail-send-it
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail)
#+end_src

** Notifications
Notifications are quite nifty, especially if I'm as lazy as I am

#+begin_src emacs-lisp
(setq alert-default-style 'osx-notifier)
#+end_src

* Languages
Configuration for various programming languages.

** LSP
Add some extra ignored directories for =+lsp=.

#+begin_src emacs-lisp
(after! lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\vendor"))
#+end_src

And some more for projectile

#+begin_src emacs-lisp
(after! projectile
  (add-to-list 'projectile-globally-ignored-directories "vendor"))
#+end_src

The default completions are quite bad

#+begin_src emacs-lisp
(after! lsp-mode
  (setq +lsp-company-backends
        '(:separate company-capf company-yasnippet)))
#+end_src

** Rust
Make =rls= the default

#+begin_src emacs-lisp
(after! rustic
  (setq rustic-lsp-server 'rls))
#+end_src

** PHP
*** Intelephense
Because I'm a massive sellout who likes features

#+begin_src emacs-lisp
(setq lsp-intelephense-licence-key (fetch-auth-source :user "intelephense"))
#+end_src

*** Eglot
Trying out this eglot thing for a bit, let's see how it goes.

Make sure it's loaded in php-mode

#+begin_src emacs-lisp
(after! eglot
  (add-hook 'php-mode-hook 'eglot-ensure))
#+end_src

Set some config needed for the server

#+begin_src emacs-lisp
(when (featurep! :tools lsp +eglot)
  (defvar php-intelephense-storage-path (expand-file-name "lsp-intelephense" doom-etc-dir))
  (defvar php-intelephense-command (expand-file-name "lsp/npm/intelephense/bin/intelephense" doom-etc-dir)))
#+end_src

And set the server to be loaded

#+begin_src emacs-lisp
(after! eglot
  (defclass eglot-php (eglot-lsp-server) () :documentation "PHP's Intelephense")
  (cl-defmethod eglot-initialization-options ((server eglot-php))
    "Passes through required intelephense options"
    `(:storagePath ,php-intelephense-storage-path
      :licenceKey ,lsp-intelephense-licence-key
      :clearCache t))
  (add-to-list 'eglot-server-programs `((php-mode phps-mode) . (eglot-php . (,php-intelephense-command "--stdio")))))
#+end_src

* Packages

** prescient
Need to add this into company module when I've tested

#+begin_src emacs-lisp :tangle packages.el
(package! company-prescient)
#+end_src

#+begin_src emacs-lisp
(use-package! company-prescient
  :config
  :hook (company-mode . company-prescient-mode)
  :hook (company-prescient-mode . prescient-persist-mode)
  :config
  (setq prescient-save-file (concat doom-cache-dir "prescient-save.el")))
#+end_src
