#+TITLE: Config
#+CAPTION: Banner
[[file:images/banner.png]]

(icon courtesy of https://github.com/eccentric-j/doom-icon)

Below is my [[https://github.com/hlissner/doom-emacs][doom-emacs]] config. Most of it isn't particularly original; snippets from stackoverflow, modernemacs and a large amount of the fancy macros from [[https://github.com/daviwil][David Wilson]]. Everything else will be commented to the best of /my/ ability.

* Table of Contents
:PROPERTIES:
:TOC:      :include all
:END:
:CONTENTS:
- [[#table-of-contents][Table of Contents]]
- [[#setup][Setup]]
  - [[#workflow][Workflow]]
  - [[#exwm-setup][EXWM Setup]]
    - [[#desktoporg][=desktop.org=]]
    - [[#session][Session]]
    - [[#startsh--start-debugsh][=start.sh= / =start-debug.sh=]]
- [[#faq][FAQ]]
- [[#globals][Globals]]
  - [[#constants-and-variables][Constants and Variables]]
  - [[#functions][Functions]]
  - [[#settings][Settings]]
    - [[#dired][Dired]]
    - [[#evil][Evil]]
      - [[#lispyville][Lispyville]]
    - [[#better-defaults][Better defaults]]
    - [[#auth-info][Auth info]]
    - [[#modeline][Modeline]]
    - [[#magit][Magit]]
    - [[#eshell][EShell]]
      - [[#prompt][Prompt]]
      - [[#settings][Settings]]
    - [[#exwm][EXWM]]
    - [[#user-setup][User setup]]
    - [[#server][Server]]
    - [[#vterm][vterm]]
      - [[#kill-buffer][Kill buffer]]
      - [[#fix-c-backspace][Fix =c-backspace=]]
      - [[#functions][Functions]]
- [[#keybindings][Keybindings]]
  - [[#defaults][Defaults]]
  - [[#swiper][Swiper]]
  - [[#dired][Dired]]
- [[#org-mode][Org Mode]]
  - [[#font-setup][Font setup]]
  - [[#characters][Characters]]
  - [[#keywords][Keywords]]
  - [[#agendalog][Agenda/Log]]
  - [[#cycle][Cycle]]
  - [[#folding][Folding]]
  - [[#org-appear][Org-appear]]
  - [[#indent--variable-pitch][Indent & variable pitch]]
  - [[#archivecleanup][Archive/Cleanup]]
  - [[#show-images][Show images]]
  - [[#autoreload-configuration][Autoreload Configuration]]
  - [[#autoexecute-tangled-shell-files][Autoexecute tangled shell files]]
  - [[#weblog-setup][Weblog setup]]
  - [[#visual-column-mode][Visual column mode]]
  - [[#org-make-toc][org-make-toc]]
  - [[#better-snippets][Better snippets]]
  - [[#capture][Capture]]
    - [[#prettify][Prettify]]
    - [[#templates][Templates]]
  - [[#export][Export]]
    - [[#chameleon][Chameleon]]
- [[#email][Email]]
  - [[#notifications][Notifications]]
- [[#languages][Languages]]
  - [[#lsp][LSP]]
  - [[#rust][Rust]]
- [[#graphical-setup][Graphical setup]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#line-numbers][Line Numbers]]
  - [[#guiframe][GUI/Frame]]
- [[#packages][Packages]]
  - [[#packagesel][=packages.el=]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#graphql-mode][Graphql-mode]]
  - [[#which-key-posframe][which-key-posframe]]
- [[#guix][Guix]]
- [[#macos][MacOS]]
:END:

* Setup
If you (somehow) haven't already guessed, this depends on [[https://github.com/hlissner/doom-emacs][Doom Emacs]], so also requires any dependency listed there. Outside of Doom, the only other dependency is =playerctl= for the now-playing modeline segment. Because of the configuration required for =vterm=, there is also a soft dependency on my [[https://github.com/elken/.files][dotfiles]] for the shell-side integration but it shouldn't cause it to break.

Email depends on =mbsync= to be setup to read email.

This is also focused around an exwm workflow (although as I use multiple systems the exwm stuff is nicely filtered out).

** Workflow
[[file:images/overview.png]]

** EXWM Setup
As mentioned above, the primary use for this config is =exwm= which is pulled from a number of files in the current environment. Loading =exwm= is quite simple, simply pass =--with-exwm= to the emacs call and everything will be loaded. The setting of this flag also loads any related configuration (ie transparency, which I don't normally care about outside of =exwm=)

*** =desktop.org=
The primary lisp file where the bulk of the configuration is held, with everything from my process manager to a now-playing segment. Below are some usage screenshots.

[[file:images/kill-process.png]]

[[file:images/tray.png]]

Transparency is handled both through [[*GUI/Frame][Doom]] and via [[file:exwm/picom.conf][picom]]. The org file is tangled out to a =desktop.el= file to be later loaded by the aforementioned processes.

*** Session
For the sake of simplicity, I use a slightly modified version of [[https://github.com/WJCFerguson/exwm-gnome-flashback][GNOME Flashback]] to run the startup scripts. It also gives me ootb access to things like =pinentry=, the various password stores, =gnome-screensaver= lock screen and the useful screenshot tool.

As such, everything is themed around [[https://nordtheme.com][Nord]].

Over time and due to various issues, I have been migrating to a plain =exwm= session but I haven't yet settled on the best approach.

*** =start.sh= / =start-debug.sh=
The scripts responsible for starting up exwm in the right way, including env variables and picom.
* FAQ
None yet because luckily nobody else has seen this spaghetti junction
* Globals
** Constants and Variables
I could make a Bioshock Infinite joke here but I can't think of one. Wouldn't think of one? Would have thought of one.

#+begin_src elisp
(global-subword-mode 1)
#+end_src

** Functions
Global functions used throughout. Some are more complex than others.

Posframes by default don't work in exwm, so let's fix that by making sure they're centered.

#+begin_src emacs-lisp
(defun elken/posframe-poshandler (info)
  "Handler to place posframe in the correct area in exwm."
  (if (not (featurep 'exwm)) (posframe-poshandler-frame-center info)
    (let* ((workarea (elt exwm-workspace--workareas exwm-workspace-current-index))
           (x (aref workarea 0))
           (y (aref workarea 1))

           (fw (aref workarea 2))
           (fh (aref workarea 3))

           (pw (plist-get info :posframe-width))
           (ph (plist-get info :posframe-height)))

      (cons
       (+ x (/ (- fw pw) 2))
       (+ y (/ (- fh ph) 2))))))
#+end_src

** Settings
*** Dired
Dired is very cool, and basically perfect out-of-the-box. We do however want ranger as the default.

#+begin_src emacs-lisp
(after! ranger
  (setq ranger-override-dired 'ranger))
#+end_src

*** Evil
I make a lot of splits, and it finally got annoying having to swap to them all the time. So, let's change that

#+begin_src emacs-lisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+end_src

**** Lispyville
This structured-editing thing is apparently really neat, so let's see how we go

#+begin_src emacs-lisp
(after! lispy
  (setq lispyville-key-theme
        '((operators normal)
          c-w
          (prettify insert)
          (atom-movement normal visual)
          (additional-movement normal)
          slurp/barf-lispy
          additional)))
#+end_src

*** Better defaults
Make the scratch buffer start in lisp mode

#+begin_src emacs-lisp
(setq doom-scratch-initial-major-mode 'lisp-interaction-mode)
#+end_src

Adjust the which-key delay because I always worry I broke something

#+begin_src emacs-lisp
(use-package! which-key
  :init
  (setq which-key-idle-delay 0.3))
#+end_src

*** Auth info
Add plaintext authinfo file to the list of sources. I /know/ I should use a GPG file but I'll get around to it damn it.

#+begin_src emacs-lisp
(add-to-list 'auth-sources "~/.authinfo")
#+end_src

*** Modeline
Some niceties for the modeline (further config can be found in [[file:desktop.el][Desktop]])

#+begin_src emacs-lisp
(after! doom-modeline
  (setq doom-modeline-major-mode-icon t
        doom-modeline-major-mode-color-icon t))
#+end_src

*** Magit
Show gravatars where possible

#+begin_src emacs-lisp
(setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
#+end_src

Allow forge to create repos under my name

#+begin_src emacs-lisp
(setq forge-owned-accounts '(("elken")))
#+end_src

*** EShell
**** Prompt
Eshell is a beautiful thing but ootb experience is a tad dated. Custom prompt based on a combination of the famous p10k and eshell-git-prompt. I only /really/ need the minimum out of a prompt:

+ =cwd=; almost impossible to work without knowing the current working directory
+ =git= info; current branch, dirty/clean status, etc
+ prompt number: useful for jumping up and down for fast history in a given session

Can't get enough out of the default powerline theme, and removing a dependancy we're rolling our own prompt called =eshell-p10kline=

#+begin_src emacs-lisp :tangle packages.el
(package! eshell-p10k
  :recipe (:host github :repo "elken/eshell-p10k"))
#+end_src

#+begin_src emacs-lisp
(use-package! eshell-p10k
  :after eshell
  :config
  (setq eshell-prompt-function #'eshell-p10k-prompt-function
        eshell-prompt-regexp eshell-p10k-prompt-string))
#+end_src

**** Settings
We use eshell in a cross platform world, so we should prefer the lisp version of things to ensure a more consistent experience.

#+begin_src emacs-lisp
(setq eshell-prefer-lisp-functions t)
#+end_src

*** EXWM

Some config has to go here (so it's reloaded properly). Remove the posframe parent and ensure that it's properly centered in the workspace.

#+begin_src emacs-lisp
;; Make posframes work in exwm
;; https://github.com/ch11ng/exwm/issues/550
(after! (ivy-posframe exwm)
  :config
  (defun +ivy-posframe-display-exwm (str)
    (ivy-posframe--display str #'elken/posframe-poshandler))
  ;; force set frame-position on every posframe display
  (advice-add 'posframe--set-frame-position :before
              (lambda (&rest args)
                (setq-local posframe--last-posframe-pixel-position nil)))
  (setq ivy-posframe-display-functions-alist
        '((t . +ivy-posframe-display-exwm))

        ivy-posframe-parameters '((parent-frame nil)
                                  (z-group . above))))
#+end_src

*** User setup
Use my name and emails for things like GPG, snippets, mail, magit, etc.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Ellis Kenyő"
      user-mail-address "me@elken.dev")
#+END_SRC

Email folders and setup. This might move to a new section if I start to use email seriously.

#+begin_src emacs-lisp
(set-email-account! "mail.elken.dev"
                    '((mu4e-sent-folder       . "/mailbox/Sent Mail")
                      (mu4e-drafts-folder     . "/mailbox/Drafts")
                      (mu4e-trash-folder      . "/mailbox/Trash")
                      (mu4e-refile-folder     . "/mailbox/All Mail")
                      (smtpmail-smtp-user     . "me@elken.dev")
                      (user-mail-address      . "me@elken.dev")    ;; only needed for mu < 1.4
                      (mu4e-compose-signature . "Regards,\nelken"))
                    t)
#+end_src

*** Server
Start a server (if not running already)

#+begin_src emacs-lisp
(after! server
  (when (not (server-running-p))
    (server-start)))
#+end_src

*** vterm
Vterm clearly wins the terminal war. Also doesn't need much configuration out of the box, although the shell integration does. That currently exists in my [[https://github.com/elken/.files][dotfiles]]

**** Kill buffer
If the process exits, kill the =vterm= buffer

#+begin_src emacs-lisp
(setq vterm-kill-buffer-on-exit t)
#+end_src

**** Fix =c-backspace=
I've picked this up in muscle memory now and I'm fed up with it not working. Not anymore!

#+begin_src emacs-lisp
(after! vterm
  (define-key vterm-mode-map (kbd "<C-backspace>") (lambda () (interactive) (vterm-send-key (kbd "C-w")))))
#+end_src

**** Functions
Useful functions for the shell-side integration provided by vterm.

#+begin_src emacs-lisp
(after! vterm
  (setf (alist-get "magit-status" vterm-eval-cmds nil nil #'equal)
        '((lambda (path)
            (magit-status path)))))
#+end_src

* Keybindings
It's not a custom config without some fancy keybinds

** Defaults
Back to a simpler time...

#+begin_src emacs-lisp
(map! :g "C-s" #'save-buffer)
#+end_src

** Swiper
Swiper is /much/ better than isearch

#+begin_src emacs-lisp
(map! :after evil :gnvi "C-f" #'swiper)
#+end_src

** Dired
Dired should behave better with evil mappings

#+begin_src emacs-lisp
(map! :map dired-mode-map
      :n "h" #'dired-up-directory
      :n "l" #'dired-find-alternate-file)
#+end_src

* Org Mode
=org-mode= is a wonderful thing, and far too complex to bury in another section. The more I use it, the more I will add to this area but for now it's mostly used for documentation and organisation.

#+begin_src emacs-lisp
(add-hook! org-mode #'(elken/org-mode-setup elken/org-font-setup))
#+end_src

** Font setup
Font setup to prettify the fonts. Uses IBM Plex Sans in most places except where it makes sense to use the defined fixed width font.

#+BEGIN_SRC emacs-lisp
(defun elken/org-font-setup ()
  ;; Set faces for heading levels
  (font-lock-add-keywords 'org-mode
                          '((":\\(@[^\:]+\\):" (1 'doom-modeline-bar-inactive))))
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "IBM Plex Sans" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-tag nil :foreground nil :inherit '(shadow fixed-pitch) :weight 'bold)
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+END_SRC

** Characters
Simplify the headline bullets

#+begin_src emacs-lisp
(setq org-superstar-headline-bullets-list '("› "))
#+end_src

And the item bullets

#+begin_src emacs-lisp
(setq org-superstar-item-bullet-alist '((?* . ?⋆)
                                        (?+ . ?‣)
                                        (?- . ?•)))
#+end_src

Change the dropdown icon to be something /neater/

#+begin_src emacs-lisp
(setq org-ellipsis " ▾")
#+end_src

And get rid of emphasis markers

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

Show entities in a nicer format, rather than UTF8 characters

#+begin_src emacs-lisp
(setq org-pretty-entities t)
#+end_src

** Keywords
Default keywords are /far/ too minimal. This will need further tweaking as I start using org mode for organisation more.

#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "PROJ(p)" "STORY(s)" "WAIT(w)" "HOLD(h)" "|" "DONE(d)" "KILL(k)")
          (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)"))))
#+end_src

** Agenda/Log
Enable log-mode so we see =DONE= tasks and the like

#+begin_src emacs-lisp
(setq org-agenda-start-with-log-mode t)
#+end_src

Auto add a timestamp to =DONE= items

#+begin_src emacs-lisp
(setq org-log-done 'time)
#+end_src

And log items in the drawer

#+begin_src emacs-lisp
(setq org-log-into-drawer t)
#+end_src

** Cycle
Cycle by default (no idea why this isn't default)

#+begin_src emacs-lisp
(setq org-cycle-emulate-tab nil)
#+end_src

** Folding
Default folding is very noisy, I /rarely/ need to see everything expanded

#+begin_src emacs-lisp
(setq org-startup-folded 'content)
#+end_src

** Org-appear
Defines a minor mode to allow special forms such as /italics/, *bold*, _underline_ and =literal= to be editable when the cursor is over them, otherwise display the proper value.

#+begin_src emacs-lisp :tangle packages.el
(package! org-appear
  :recipe (:host github :repo "awth13/org-appear"))
#+end_src


Setup for =org-appear= mode
#+begin_src emacs-lisp
(setq org-appear-autoemphasis t
      org-appear-autolinks t
      org-appear-autosubmarkers t)
#+end_src

** Indent & variable pitch
Add the package
#+begin_src emacs-lisp :tangle packages.el
(package! org-variable-pitch
  :recipe (:host github
           :repo "cadadr/elisp"))
#+end_src

Enable =org-indent-mode= by default to properly indent everything automagically, =variable-pitch-mode= to enable the more readable fonts where it makes sense and =visual-line-mode= to add a "current line" selection.

#+BEGIN_SRC emacs-lisp
(defun elken/org-mode-setup ()
  (org-make-toc-mode)
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1)
  (org-variable-pitch-setup)
  (org-appear-mode))
#+END_SRC

** Archive/Cleanup
Adjust the format of archived org files (so they don't show up in orgzly)

#+begin_src emacs-lisp
(setq org-archive-location "archive/Archive_%s::")
#+end_src


Enables archiving of tasks. Replaces the in-built version which only works for single tasks.

#+BEGIN_SRC emacs-lisp
(defun elken/org-archive-done-tasks ()
  "Attempt to archive all done tasks in file"
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/DONE" 'file))

(map! :map org-mode-map :desc "Archive tasks marked DONE" "C-c DEL a" #'elken/org-archive-done-tasks)
#+END_SRC

Enables removal of killed tasks. I'm not /yet/ interested in tracking this long-term.

#+BEGIN_SRC emacs-lisp
(defun elken/org-remove-kill-tasks ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-cut-subtree)
     (pop kill-ring)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/KILL" 'file))

(map! :map org-mode-map :desc "Remove tasks marked as KILL" "C-c DEL k" #'elken/org-remove-kill-tasks)
#+END_SRC

** Show images
Show images inline by default

#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC

** Autoreload Configuration

Auto reload config on save (both =config.org= and =init.el=)

#+begin_src emacs-lisp
(require 'cl-extra)
(defvar elken/reload-files '("config.org" "init.el"))
(defvar elken/extra-org-files '())

(defun elken/doom-reload-on-save ()
  (cond
   ((cl-some (lambda (s)
               (string-equal
                (buffer-file-name)
                (expand-file-name s doom-private-dir)))
             elken/reload-files) (doom/reload))
   ((cl-some (lambda (s)
               (string-equal
                (buffer-file-name)
                (expand-file-name s doom-private-dir)))
             elken/extra-org-files) (let ((org-confirm-babel-evaluate nil))
             (org-babel-tangle)))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'elken/doom-reload-on-save)))
#+end_src

** Autoexecute tangled shell files
Make tangled shell files executable (I trust myself, ish...)

#+begin_src emacs-lisp
(defun elken/make-tangled-shell-executable ()
  "Ensure that tangled shell files are executable"
  (set-file-modes (buffer-file-name) #o755))

(add-hook 'org-babel-post-tangle-hook 'elken/make-tangled-shell-executable)
#+end_src

** Weblog setup
Useful settings and functions for [[https://github.com/theiceshell/firn][firn]] and other blogging tools

Testing out weblorg, might encourage me to finally finish my site revamp...

#+begin_src emacs-lisp :tangle packages.el
(package! weblorg)
#+end_src

#+begin_src emacs-lisp
(use-package! weblorg)
#+end_src

#+begin_src emacs-lisp
(setq enable-dir-local-variables t)
(defun elken/find-time-property (property)
  "Find the PROPETY in the current buffer."
  (save-excursion
    (goto-char (point-min))
    (let ((first-heading
           (save-excursion
             (re-search-forward org-outline-regexp-bol nil t))))
      (when (re-search-forward (format "^#\\+%s:" property) nil t)
        (point)))))

(defun elken/has-time-property-p (property)
  "Gets the position of PROPETY if it exists, nil if not and empty string if it's undefined."
  (when-let ((pos (elken/find-time-property property)))
    (save-excursion
      (goto-char pos)
      (if (and (looking-at-p " ")
               (progn (forward-char)
                      (org-at-timestamp-p 'lax)))
          pos
        ""))))

(defun elken/set-time-property (property &optional pos)
  "Set the PROPERTY in the current buffer.
Can pass the position as POS if already computed."
  (when-let ((pos (or pos (elken/find-time-property property))))
    (save-excursion
      (goto-char pos)
      (if (looking-at-p " ")
          (forward-char)
        (insert " "))
      (delete-region (point) (line-end-position))
      (let* ((now (format-time-string "<%Y-%m-%d %H:%M>")))
        (insert now)))))

(add-hook! 'before-save-hook (when (derived-mode-p 'org-mode) (elken/set-time-property "DATE_UPDATED")))
#+end_src

** Visual column mode
Enable =visual-fill-column-mode= to center an org document for nicer editing.

First we need the package

#+begin_src emacs-lisp :tangle packages.el
(package! visual-fill-column)
#+end_src

Then we define a setup function

#+BEGIN_SRC emacs-lisp
(defun elken/org-mode-visual-fill ()
  (setq visual-fill-column-width 200
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))
#+END_SRC

And add a hook to load it

#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'elken/org-mode-visual-fill)
#+end_src

** org-make-toc
There's still a few bugs with this, but it works fine on Github mostly.

#+begin_src emacs-lisp :tangle packages.el
(package! org-make-toc)
#+end_src

And then load it

#+begin_src emacs-lisp
(use-package! org-make-toc
  :after org)
#+end_src

** Better snippets
Programmers are, by design, lazy

#+begin_src emacs-lisp
(use-package! org-tempo
  :after org
  :init
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+end_src

** Capture
It's about time I start using =org-capture=, but because I'm a developer I'm inhernetly lazy so time to steal from other people.

Useful wrapper package for creating more declarative templates
#+begin_src emacs-lisp :tangle packages.el
(package! doct)
#+end_src
#+begin_src emacs-lisp
(use-package! doct
  :commands (doct))
#+end_src

*** Prettify
Improve the look of the capture dialog (idea borrowed from [[https://github.com/tecosaur][tecosaur]])
#+begin_src emacs-lisp
(defun org-capture-select-template-prettier (&optional keys)
  "Select a capture template, in a prettier way than default
Lisp programs can force the template by setting KEYS to a string."
  (let ((org-capture-templates
         (or (org-contextualize-keys
              (org-capture-upgrade-templates org-capture-templates)
              org-capture-templates-contexts)
             '(("t" "Task" entry (file+headline "" "Tasks")
                "* TODO %?\n  %u\n  %a")))))
    (if keys
        (or (assoc keys org-capture-templates)
            (error "No capture template referred to by \"%s\" keys" keys))
      (org-mks org-capture-templates
               "Select a capture template\n━━━━━━━━━━━━━━━━━━━━━━━━━"
               "Template key: "
               `(("q" ,(concat (all-the-icons-octicon "stop" :face 'all-the-icons-red :v-adjust 0.01) "\tAbort")))))))
(advice-add 'org-capture-select-template :override #'org-capture-select-template-prettier)

(defun org-mks-pretty (table title &optional prompt specials)
  "Select a member of an alist with multiple keys. Prettified.

TABLE is the alist which should contain entries where the car is a string.
There should be two types of entries.

1. prefix descriptions like (\"a\" \"Description\")
   This indicates that `a' is a prefix key for multi-letter selection, and
   that there are entries following with keys like \"ab\", \"ax\"…

2. Select-able members must have more than two elements, with the first
   being the string of keys that lead to selecting it, and the second a
   short description string of the item.

The command will then make a temporary buffer listing all entries
that can be selected with a single key, and all the single key
prefixes.  When you press the key for a single-letter entry, it is selected.
When you press a prefix key, the commands (and maybe further prefixes)
under this key will be shown and offered for selection.

TITLE will be placed over the selection in the temporary buffer,
PROMPT will be used when prompting for a key.  SPECIALS is an
alist with (\"key\" \"description\") entries.  When one of these
is selected, only the bare key is returned."
  (save-window-excursion
    (let ((inhibit-quit t)
          (buffer (org-switch-to-buffer-other-window "*Org Select*"))
          (prompt (or prompt "Select: "))
          case-fold-search
          current)
      (unwind-protect
          (catch 'exit
            (while t
              (setq-local evil-normal-state-cursor (list nil))
              (erase-buffer)
              (insert title "\n\n")
              (let ((des-keys nil)
                    (allowed-keys '("\C-g"))
                    (tab-alternatives '("\s" "\t" "\r"))
                    (cursor-type nil))
                ;; Populate allowed keys and descriptions keys
                ;; available with CURRENT selector.
                (let ((re (format "\\`%s\\(.\\)\\'"
                                  (if current (regexp-quote current) "")))
                      (prefix (if current (concat current " ") "")))
                  (dolist (entry table)
                    (pcase entry
                      ;; Description.
                      (`(,(and key (pred (string-match re))) ,desc)
                       (let ((k (match-string 1 key)))
                         (push k des-keys)
                         ;; Keys ending in tab, space or RET are equivalent.
                         (if (member k tab-alternatives)
                             (push "\t" allowed-keys)
                           (push k allowed-keys))
                         (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) (propertize "›" 'face 'font-lock-comment-face) "  " desc "…" "\n")))
                      ;; Usable entry.
                      (`(,(and key (pred (string-match re))) ,desc . ,_)
                       (let ((k (match-string 1 key)))
                         (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) "   " desc "\n")
                         (push k allowed-keys)))
                      (_ nil))))
                ;; Insert special entries, if any.
                (when specials
                  (insert "─────────────────────────\n")
                  (pcase-dolist (`(,key ,description) specials)
                    (insert (format "%s   %s\n" (propertize key 'face '(bold all-the-icons-red)) description))
                    (push key allowed-keys)))
                ;; Display UI and let user select an entry or
                ;; a sub-level prefix.
                (goto-char (point-min))
                (unless (pos-visible-in-window-p (point-max))
                  (org-fit-window-to-buffer))
                (let ((pressed (org--mks-read-key allowed-keys prompt nil)))
                  (setq current (concat current pressed))
                  (cond
                   ((equal pressed "\C-g") (user-error "Abort"))
                   ((equal pressed "ESC") (user-error "Abort"))
                   ;; Selection is a prefix: open a new menu.
                   ((member pressed des-keys))
                   ;; Selection matches an association: return it.
                   ((let ((entry (assoc current table)))
                      (and entry (throw 'exit entry))))
                   ;; Selection matches a special entry: return the
                   ;; selection prefix.
                   ((assoc current specials) (throw 'exit current))
                   (t (error "No entry available")))))))
        (when buffer (kill-buffer buffer))))))
(advice-add 'org-mks :override #'org-mks-pretty)
#+end_src

The [[file:~/.emacs.doom/bin/org-capture][org-capture bin]] is rather nice, but I'd be nicer with a smaller frame, and
no modeline.

#+begin_src emacs-lisp
(setf (alist-get 'height +org-capture-frame-parameters) 15)
;; (alist-get 'name +org-capture-frame-parameters) "❖ Capture") ;; ATM hardcoded in other places, so changing breaks stuff
(setq +org-capture-fn
      (lambda ()
        (interactive)
        (set-window-parameter nil 'mode-line-format 'none)
        (org-capture)))
#+end_src

Sprinkle in some =doct= utility functions
#+begin_src emacs-lisp
(defun +doct-icon-declaration-to-icon (declaration)
  "Convert :icon declaration to icon"
  (let ((name (pop declaration))
        (set  (intern (concat "all-the-icons-" (plist-get declaration :set))))
        (face (intern (concat "all-the-icons-" (plist-get declaration :color))))
        (v-adjust (or (plist-get declaration :v-adjust) 0.01)))
    (apply set `(,name :face ,face :v-adjust ,v-adjust))))

(defun +doct-iconify-capture-templates (groups)
  "Add declaration's :icon to each template group in GROUPS."
  (let ((templates (doct-flatten-lists-in groups)))
    (setq doct-templates (mapcar (lambda (template)
                                   (when-let* ((props (nthcdr (if (= (length template) 4) 2 5) template))
                                               (spec (plist-get (plist-get props :doct) :icon)))
                                     (setf (nth 1 template) (concat (+doct-icon-declaration-to-icon spec)
                                                                    "\t"
                                                                    (nth 1 template))))
                                   template)
                                 templates))))

(setq doct-after-conversion-functions '(+doct-iconify-capture-templates))
#+end_src

*** Templates

And we can now add some templates! This isn't even remotely set in stone, I wouldn't even describe them as set in /jelly/ really.
#+begin_src emacs-lisp
(setq org-capture-templates
      (doct `(("Home" :keys "h"
               :icon ("home" :set "octicon" :color "cyan")
               :file "Home.org"
               :prepend t
               :headline "Inbox"
               :template ("* TODO %?"
                          "%i %a"))
              ("Work" :keys "w"
               :icon ("business" :set "material" :color "yellow")
               :file "Work.org"
               :prepend t
               :headline "Inbox"
               :template ("* TODO %?"
                          "SCHEDULED: %^{Schedule:}t"
                          "DEADLINE: %^{Deadline:}t"
                          "%i %a"))
              ("Note" :keys "n"
               :icon ("sticky-note" :set "faicon" :color "yellow")
               :file "Notes.org"
               :template ("* *?"
                          "%i %a"))
              ("Project" :keys "p"
               :icon ("repo" :set "octicon" :color "silver")
               :prepend t
               :type entry
               :headline "Inbox"
               :template ("* %{keyword} %?"
                          "%i"
                          "%a")
               :file ""
               :custom (:keyword "")
               :children (("Task" :keys "t"
                           :icon ("checklist" :set "octicon" :color "green")
                           :keyword "TODO"
                           :file +org-capture-project-todo-file)
                          ("Note" :keys "n"
                           :icon ("sticky-note" :set "faicon" :color "yellow")
                           :keyword "%U"
                           :file +org-capture-project-notes-file)))
              )))
#+end_src

** Export
*** Chameleon
Attempt to improve default PDF export by using the current theme
#+begin_src elisp
(after! ox
    (defadvice! ox-chameleon-org-latex-export (orig-fn info &optional template snippet?)
    :around #'org-latex-make-preamble
          (concat (funcall orig-fn info template snippet?)
                  (ox-chameleon-generate-colourings))
      (funcall orig-fn info template snippet?))

  (defun ox-chameleon-generate-colourings ()
    (apply #'format
           "%% make document follow Emacs theme
\\definecolor{bg}{HTML}{%s}
\\definecolor{fg}{HTML}{%s}

\\definecolor{red}{HTML}{%s}
\\definecolor{orange}{HTML}{%s}
\\definecolor{green}{HTML}{%s}
\\definecolor{teal}{HTML}{%s}
\\definecolor{yellow}{HTML}{%s}
\\definecolor{blue}{HTML}{%s}
\\definecolor{dark-blue}{HTML}{%s}
\\definecolor{magenta}{HTML}{%s}
\\definecolor{violet}{HTML}{%s}
\\definecolor{cyan}{HTML}{%s}
\\definecolor{dark-cyan}{HTML}{%s}

\\definecolor{documentTitle}{HTML}{%s}
\\definecolor{documentInfo}{HTML}{%s}
\\definecolor{level1}{HTML}{%s}
\\definecolor{level2}{HTML}{%s}
\\definecolor{level3}{HTML}{%s}
\\definecolor{level4}{HTML}{%s}
\\definecolor{level5}{HTML}{%s}
\\definecolor{level6}{HTML}{%s}
\\definecolor{level7}{HTML}{%s}
\\definecolor{level8}{HTML}{%s}

\\definecolor{link}{HTML}{%s}
\\definecolor{cite}{HTML}{%s}
\\definecolor{itemlabel}{HTML}{%s}
\\definecolor{code}{HTML}{%s}
\\definecolor{verbatim}{HTML}{%s}

\\definecolor{codebackground}{HTML}{%s}
\\colorlet{EFD}{fg}
\\definecolor{codeborder}{HTML}{%s}

\\pagecolor{bg}
\\color{fg}

\\addtokomafont{title}{\\color{documentTitle}}
\\addtokomafont{author}{\\color{documentInfo}}
\\addtokomafont{date}{\\color{documentInfo}}
\\addtokomafont{section}{\\color{level1}}
\\newkomafont{sectionprefix}{\\color{level1}}
\\addtokomafont{subsection}{\\color{level2}}
\\newkomafont{subsectionprefix}{\\color{level2}}
\\addtokomafont{subsubsection}{\\color{level3}}
\\newkomafont{subsubsectionprefix}{\\color{level3}}
\\addtokomafont{paragraph}{\\color{level4}}
\\newkomafont{paragraphprefix}{\\color{level4}}
\\addtokomafont{subparagraph}{\\color{level5}}
\\newkomafont{subparagraphprefix}{\\color{level5}}

\\renewcommand{\\labelitemi}{\\textcolor{itemlabel}{\\textbullet}}
\\renewcommand{\\labelitemii}{\\textcolor{itemlabel}{\\normalfont\\bfseries \\textendash}}
\\renewcommand{\\labelitemiii}{\\textcolor{itemlabel}{\\textasteriskcentered}}
\\renewcommand{\\labelitemiv}{\\textcolor{itemlabel}{\\textperiodcentered}}

\\renewcommand{\\labelenumi}{\\textcolor{itemlabel}{\\theenumi.}}
\\renewcommand{\\labelenumii}{\\textcolor{itemlabel}{(\\theenumii)}}
\\renewcommand{\\labelenumiii}{\\textcolor{itemlabel}{\\theenumiii.}}
\\renewcommand{\\labelenumiv}{\\textcolor{itemlabel}{\\theenumiv.}}

\\DeclareTextFontCommand{\\texttt}{\\color{code}\\ttfamily}
\\makeatletter
\\def\\verbatim@font{\\color{verbatim}\\normalfont\\ttfamily}
\\makeatother
%% end customisations
"
           (mapcar (doom-rpartial #'substring 1)
                   (list
                    (face-attribute 'solaire-default-face :background)
                    (face-attribute 'default :foreground)
                    ;;
                    (doom-color 'red)
                    (doom-color 'orange)
                    (doom-color 'green)
                    (doom-color 'teal)
                    (doom-color 'yellow)
                    (doom-color 'blue)
                    (doom-color 'dark-blue)
                    (doom-color 'magenta)
                    (doom-color 'violet)
                    (doom-color 'cyan)
                    (doom-color 'dark-cyan)
                    ;;
                    (face-attribute 'org-document-title :foreground)
                    (face-attribute 'org-document-info :foreground)
                    (face-attribute 'outline-1 :foreground)
                    (face-attribute 'outline-2 :foreground)
                    (face-attribute 'outline-3 :foreground)
                    (face-attribute 'outline-4 :foreground)
                    (face-attribute 'outline-5 :foreground)
                    (face-attribute 'outline-6 :foreground)
                    (face-attribute 'outline-7 :foreground)
                    (face-attribute 'outline-8 :foreground)
                    ;;
                    (face-attribute 'link :foreground)
                    (doom-color 'yellow)
                    (face-attribute 'org-list-dt :foreground)
                    (face-attribute 'org-code :foreground)
                    (face-attribute 'org-verbatim :foreground)
                    ;;
                    (face-attribute 'default :background)
                    (doom-blend (face-attribute 'default :background)
                                (face-attribute 'default :foreground)
                                0.95))))))
#+end_src

#+RESULTS:
: ox-chameleon-generate-colourings

* Email
Currently handled through =mu4e=, works easy enough and I don't need too much out of email.

Set the interval to a sensible timeout (10 minutes is plenty)
#+begin_src emacs-lisp
(setq mu4e-update-interval 600)
#+end_src

** Notifications
Notifications are quite nifty, especially if I'm as lazy as I am

#+begin_src emacs-lisp :tangle packages.el
(package! mu4e-alert)
#+end_src

#+begin_src emacs-lisp
(mu4e-alert-set-default-style 'libnotify)
(add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
#+end_src

* Languages
Configuration for various programming languages.

** LSP
Add some extra ignored directories for =+lsp=.

#+begin_src emacs-lisp
(after! lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\vendor"))
#+end_src

And some more for projectile

#+begin_src emacs-lisp
(after! projectile
  (add-to-list 'projectile-globally-ignored-directories "vendor"))
#+end_src

** Rust
Make =rls= the default

#+begin_src emacs-lisp
(after! rustic
  (setq rustic-lsp-server 'rls))
#+end_src

* Graphical setup
** Fonts
Configure the fonts across all used platforms (slightly different names).

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Iosevka Nerd Font Mono" :size 13)
      doom-variable-pitch-font (font-spec :family "IBM Plex Sans" :size 13)
      doom-emoji-fallback-font-families nil
      doom-symbol-fallback-font-families nil)
#+END_SRC

** Theme

Load my current flavour-of-the-month colour scheme.

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-nord)
#+END_SRC

Change the default banner (need to add the ASCII banner at some point)

#+BEGIN_SRC emacs-lisp
(setq +doom-dashboard-banner-file (expand-file-name "images/banner.png" doom-private-dir))
#+END_SRC

** Line Numbers
Set the default line number format to be relative and disable line numbers for specific modes
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)

(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** GUI/Frame
Maximise emacs on startup

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

Add some transparency

#+begin_src emacs-lisp
(after! exwm
  (set-frame-parameter (selected-frame) 'alpha 90)
  (add-to-list 'default-frame-alist '(alpha . 90)))
#+end_src

* Packages

** =packages.el=
Tangle this into the packages.el file. Removes the need for it.

#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! rainbow-mode)
(package! graphql-mode)
(package! which-key-posframe)
#+END_SRC

** Rainbow Mode

Colouring parentheses so I don't get confused by the scary lisp dialects.

#+BEGIN_SRC emacs-lisp
(use-package! rainbow-mode
    :hook
    (prog-mode . rainbow-mode)
    (text-mode . rainbow-mode))
#+END_SRC

** Graphql-mode
Used for displaying graphql queries nicely & sending.

#+begin_src emacs-lisp
(use-package! graphql-mode)
#+end_src

** which-key-posframe
The last piece of Exodia. Now I can posframe everything for vague satisfation.

#+begin_src emacs-lisp

  (use-package! which-key-posframe
    :config
    (which-key-posframe-mode)
    (after! exwm
      (setq which-key-posframe-parameters '((parent-frame nil)
                                            (z-group . above))
            which-key-posframe-poshandler #'elken/posframe-poshandler)))
#+end_src

* Guix
#+begin_src emacs-lisp
(when (getenv "EMACSLOADPATH")
  (mapc (lambda (p) (add-load-path! p)) (split-string (getenv "EMACSLOADPATH") ":")))
#+end_src

* MacOS
Currently my primary platform, so we have to make sure everything works as expected.

#+begin_src elisp
(if (and (fboundp 'native-comp-available-p)
         (native-comp-available-p))
    (progn
      (message "Native comp is available")
      ;; Using Emacs.app/Contents/MacOS/bin since it was compiled with
      ;; ./configure --prefix="$PWD/nextstep/Emacs.app/Contents/MacOS"
      ;; Append to path to give priority to values from exec-path-from-shell-initialize.
      (add-to-list 'exec-path (concat invocation-directory (file-name-as-directory "bin")) t)
      (setenv "LIBRARY_PATH" (concat (getenv "LIBRARY_PATH")
                                     (when (getenv "LIBRARY_PATH")
                                       ":")
                                     ;; This is where Homebrew puts libgccjit libraries.
                                     (car (file-expand-wildcards
                                           (expand-file-name (concat (shell-command-to-string "brew --prefix libgccjit") "/lib/gcc/*"))))))
      ;; Only set after LIBRARY_PATH can find gcc libraries.
      (setq comp-deferred-compilation t)
      (setq comp-speed 3))
  (message "Native comp is *not* available"))
#+end_src
